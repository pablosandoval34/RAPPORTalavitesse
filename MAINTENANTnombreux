from math import sqrt
n = 100
sqrt_n = int(sqrt(n))
no_primes = [j for i in range(2, sqrt_n+1) for j in range(i*2, n, i)]
####A set comprehension is similar to a list comprehension, but returns a set and not a list. 
Syntactically, we use curly brackets instead of square brackets to create a set. Set comprehension is the 
right functionality to solve our problem from the previous subsection. 
We are able to create the set of non primes without doublets:

from math import sqrt
n = 100
sqrt_n = int(sqrt(n))
no_primes = {j for i in range(2, sqrt_n+1) for j in range(i*2, n, i)}
no_primes

primes = {i for i in range(2, n) if i not in no_primes}
print(primes)
{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}
 ###Recursive Function to Calculate the Primes
The following Python script uses a recursive function to calculate the prime numbers. It 
incorporates the fact that it is enough to examine the multiples of the
prime numbers up to the square root of n:
from math import sqrt
def primes(n):
    if n == 0:
        return []
    elif n == 1:
        return []
    else:
        p = primes(int(sqrt(n)))
        no_p = {j for i in p for j in range(i*2, n+1, i)}
        p = {x for x in range(2, n + 1) if x not in no_p}
    return p

for i in range(1,50):
    print(i, primes(i))
    
cities = ["Paris", "Berlin", "Hamburg", "Frankfurt", "London", "Vienna", "Amsterdam", "Den Haag"]
for location in cities:
     print("location: " + location)
     
hauptstaedte = { "Ã–sterreich":"Wien", "Niederlande":"Amsterdam", "Deutschland":"Berlin", "Schweiz":"Bern" }
for land in hauptstaedte:
     print("Die Hauptstadt von " + land + " ist " + hauptstaedte[land])      
